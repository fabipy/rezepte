{"version":3,"sources":["components/IngredientList.js","components/Credit.js","components/Search.js","components/ShortList.js","components/Suggestions.js","App.js","serviceWorker.js","index.js"],"names":["IngredientList","this","props","data","filterText","addSelection","selection","ingredientList","filter","item","indexOf","id","toLowerCase","map","key","className","onClick","Component","href","target","rel","Search","refs","filterInput","placeholder","focus","filterVal","filterUpdate","minDeviceWidth","autoFocus","type","ref","value","onChange","maxDeviceWidth","removeSelection","url_search","ingrList","length","role","aria-label","Suggestions","intersectB","firstSet","intersect","a","b","Set","has","sets","forEach","sItem","ingredientID","SuggestionList","sel","tempset","push","inter","intersection_list","undefined","ingredient","console","log","App","state","setState","sel_list","concat","filteredAry","e","hasSearch","bind","ShortList","Credit","Boolean","window","location","hostname","match","array","i","j","Math","floor","random","temp","shuffleArray","updateID","tempdict","termIDmapping","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OA+CeA,E,uKAjCD,IAAD,EACiDC,KAAKC,MAAnDC,EADH,EACGA,KAAMC,EADT,EACSA,WAAYC,EADrB,EACqBA,aAAcC,EADnC,EACmCA,UAGtCC,EAAiBJ,EACpBK,QAAO,SAAAC,GACN,OAAOH,EAAUI,QAAQD,EAAKE,IAAM,KAErCH,QAAO,SAAAC,GACN,OAAOA,EAAKA,KAAKG,cAAcF,QAAQN,EAAWQ,gBAAkB,KAErEC,KAAI,SAAAJ,GACH,OACE,wBACEK,IAAKL,EAAKE,GACVI,UAAU,aACVC,QAAS,kBAAMX,EAAaI,EAAKE,MAE9BF,EAAKA,SAKhB,OACE,6BACE,4BACCF,Q,GA3BoBU,aCXd,oBACX,yBAAKF,UAAU,UACf,mDACyB,uBACDG,KAAK,wDACLC,OAAO,SACPC,IAAI,uBAHH,0BADzB,wHAM6C,uBACrBF,KAAK,sFACLC,OAAO,SACPC,IAAI,uBAHiB,gBAN7C,6R,gBCgDWC,E,mLAvC+B,6BAAtCpB,KAAKqB,KAAKC,YAAYC,aAC1BvB,KAAKqB,KAAKC,YAAYE,U,+BAId,IAAD,SAC4BxB,KAAKC,MAAhCwB,EADD,EACCA,UAAWC,EADZ,EACYA,aACnB,OACE,8BACE,kBAAC,IAAD,CAAYC,eAAgB,MAC5B,2BACEC,WAAS,EACTC,KAAK,OACLC,IAAI,cACJP,YAAY,2BAEZQ,MAAON,EACPO,SAAU,WACTN,EAAa,EAAKL,KAAKC,YAAYS,WAItC,kBAAC,IAAD,CAAYE,eAAgB,MAC5B,2BACEJ,KAAK,OACLC,IAAI,cACJP,YAAY,0BAEZQ,MAAON,EACPO,SAAU,WACTN,EAAa,EAAKL,KAAKC,YAAYS,gB,GAjCzBf,aCRN,cAAyC,IAAvCd,EAAsC,EAAtCA,KAAMG,EAAgC,EAAhCA,UAAW6B,EAAqB,EAArBA,gBAC1BC,EAAa,kCACXC,EAAW/B,EAAUO,KAAI,SAAAF,GAC/ByB,GAAcjC,EAAKQ,GAAL,KACdyB,GAAc,IAFuB,IAG7B3B,EAASN,EAAKQ,GAAdF,KACR,OACI,wBACAK,IAAKH,EAAII,UAAU,WACnBC,QAAS,kBAAMmB,EAAgBhC,EAAKQ,GAAL,MAC7BF,MAIN,OADA2B,GAAc,SAEV,6BACC9B,EAAUgC,OAAS,EAAI,GAAK,uEAC7B,4BACKD,GAEJ/B,EAAUgC,OAAS,EAAI,uBACApB,KAAMkB,EACNjB,OAAO,SACPC,IAAI,uBAAsB,0BACEmB,KAAK,MACLC,aAAW,iCAFb,gBAH1B,iBAKoG,K,OCgCrHC,E,uKAvDP,SAASC,EAAWC,GAAmB,IAEnC,IAAIC,EAAY,SAACC,EAAEC,GACf,OAAO,IAAIC,IAAI,YAAIF,GAAGrC,QAAO,SAAAC,GAAI,OAAIqC,EAAEE,IAAIvC,QAHZ,mBAANwC,EAAM,iCAANA,EAAM,kBAUnC,OAHAA,EAAKC,SAAQ,SAAAC,GAAK,OAAIR,EAAWC,EAAUD,EAAUQ,MAG9CR,EAGX,IAAIM,EAAO,GAdN,EAgBmDhD,KAAKC,MAArDC,EAhBH,EAgBGA,KAAMG,EAhBT,EAgBSA,UAAWD,EAhBpB,EAgBoBA,aAAc+C,EAhBlC,EAgBkCA,aACjCC,EAAiB/C,EAAUO,KAAI,SAAAyC,GACrC,IAAIC,EAAU,IAAIR,IAAI5C,EAAKmD,GAAL,WAEtB,GADAL,EAAKO,KAAKD,GACNjD,EAAUgC,SAAWW,EAAKX,OAC1B,IAAImB,EAAQf,EAAU,WAAV,EAAcO,GACtBS,EAAiB,YAAOD,GAEhC,YAA0BE,IAAtBD,EAEAA,EACF7C,KAAI,SAAA+C,GACF,OACI,wBACA9C,IAAKsC,EAAaQ,GAClB7C,UAAU,aACVC,QAAS,kBAAMX,EAAa+C,EAAaQ,MAC1CA,MAKCC,QAAQC,IAAI,aAOpB,OACI,yBAAK/C,UAAU,iBACgB,IAA1BsC,EAAef,OAAe,GAAK,uDACpC,4BACKe,Q,GAlDKpC,aCqFX8C,E,kDA3Eb,WAAY7D,GAAQ,IAAD,8BACjB,cAAMA,IACD8D,MAAQ,CACX5D,WAAY,GACZE,UAAW,IAJI,E,yDAQN0B,GACX/B,KAAKgE,SAAS,CACZ7D,WAAY4B,M,mCAIHrB,GACX,IAAMuD,EAAWjE,KAAK+D,MAAM1D,UAAU6D,OAAO,CAACxD,IAC9CV,KAAK0B,aAAa,IAClB1B,KAAKgE,SAAS,CACZ3D,UAAW4D,M,sCAKCvD,GACd,IACIyD,EADanE,KAAK+D,MAAM1D,UACDE,QAAO,SAAS6D,GAAK,OAAOA,IAAM1D,KAC7DV,KAAKgE,SAAS,CACZ3D,UAAW8D,M,+BAKb,IAAME,EAAYrE,KAAK+D,MAAM5D,WAAWkC,OAAS,EACjD,OACE,6BACE,gCACA,kBAAC,EAAD,CACAZ,UAAWzB,KAAK+D,MAAM5D,WACtBuB,aAAc1B,KAAK0B,aAAa4C,KAAKtE,SAGrC,8BACA,kBAACuE,EAAD,CACAlE,UAAWL,KAAK+D,MAAM1D,UACtBH,KAAMF,KAAKC,MAAMC,KACjBgC,gBAAiBlC,KAAKkC,gBAAgBoC,KAAKtE,SAExCqE,GACC,kBAAC,EAAD,CACJnE,KAAMF,KAAKC,MAAMC,KACjBiD,aAAcnD,KAAKC,MAAMkD,aACzB9C,UAAWL,KAAK+D,MAAM1D,UACtBD,aAAcJ,KAAKI,aAAakE,KAAKtE,QAGrC,kBAAC,EAAD,CACAE,KAAMF,KAAKC,MAAMC,KACjBC,WAAYH,KAAK+D,MAAM5D,WACvBE,UAAWL,KAAK+D,MAAM1D,UACtBD,aAAcJ,KAAKI,aAAakE,KAAKtE,QAGnCqE,GACA,4BACAtD,QAASf,KAAK0B,aAAa4C,KAAKtE,KAAM,KADtC,yBAKF,kBAACwE,EAAD,Y,GAtEUxD,aCEEyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVN,SAAsBC,GAEpB,IADA,IAAIC,EAAID,EAAMzC,OAAS,EAChB0C,EAAI,EAAGA,IAAK,CACjB,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCK,EAAON,EAAMC,GACnBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,GAsBfC,CAAanF,GAjBb,SAAkB4E,GAChB,IAAIC,EACJ,IAAKA,EAAE,EAAGA,EAAID,EAAMzC,OAAS0C,IAC3BD,EAAMC,GAAN,GAAiBA,EAerBO,CAASpF,GACT,IAAMiD,EAXN,SAAuB2B,GACrB,IAAIC,EACAQ,EAAW,GACf,IAAKR,EAAE,EAAGA,EAAID,EAAMzC,OAAS0C,IAC3BQ,EAAST,EAAMC,GAAN,MAAoBA,EAE/B,OAAOQ,EAKYC,CAActF,GAEnCuF,IAASC,OAEL,kBAAC,EAAD,CACAxF,KAAMA,EACNiD,aAAcA,IAGhBwC,SAASC,eAAe,SDoFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.b7ee96c6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n// function shuffleArray(array) {\r\n//     let i = array.length - 1;\r\n//     for (; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       const temp = array[i];\r\n//       array[i] = array[j];\r\n//       array[j] = temp;\r\n//     }\r\n//     return array;\r\n//   }\r\n\r\nclass IngredientList extends Component {\r\n    render() {\r\n        const { data, filterText, addSelection, selection } = this.props;\r\n        // const shuffledIngredients = shuffleArray(data);\r\n\r\n    const ingredientList = data\r\n      .filter(item => {\r\n        return selection.indexOf(item.id) < 0\r\n      })\r\n      .filter(item => {\r\n        return item.item.toLowerCase().indexOf(filterText.toLowerCase()) >= 0\r\n      })\r\n      .map(item => {\r\n        return (\r\n          <li \r\n            key={item.id} \r\n            className=\"ingredient\"\r\n            onClick={() => addSelection(item.id)}\r\n            >\r\n              {item.item}\r\n          </li>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <ul>\r\n        {ingredientList}\r\n        </ul>\r\n      </div>\r\n    );\r\n    } \r\n}\r\n\r\nexport default IngredientList;","import React from 'react'\r\n\r\nexport default () =>\r\n    <div className=\"credit\">\r\n    <p>\r\n        Credits: I used this <a \r\n                            href=\"https://www.kaggle.com/sterby/german-recipes-dataset/\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            >German recipes dataset</a> from Kaggle and preprocessed the unstructured ingredient data with Python. \r\n        To work on my JS skills, I followed this <a \r\n                            href=\"https://www.youtube.com/watch?v=DGtNLoY64ZQ&list=PLHrxuCR-0CcT7hgVVlh0lBWTqYkEEF55m\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            >\r\n                            React series</a> by simonswiss on Youtube and made some additional changes to it.\r\n\r\n                            Note: Some of the ingredients in the list might be nonsensical, since I used RegEx to filter for the ingredients and did not manually go through the list afterwards to remove items that were incorrectly extracted.\r\n    </p>\r\n    </div>","import React, { Component } from 'react'\r\nimport MediaQuery from 'react-responsive'\r\n\r\n/* ###################### */\r\n/* ##### Search bar ##### */\r\n/* ###################### */\r\n\r\n// need a component class here\r\n// since we are using `refs`\r\n\r\nclass Search extends Component {\r\n\r\n  componentDidUpdate(){\r\n    if (this.refs.filterInput.placeholder === \"Nach Zutaten filtern ...\") {\r\n    this.refs.filterInput.focus();\r\n  }\r\n  }\r\n\r\n  render() {\r\n    const { filterVal, filterUpdate} = this.props\r\n    return (\r\n      <form>\r\n        <MediaQuery minDeviceWidth={1224}>\r\n        <input \r\n          autoFocus\r\n          type='text'\r\n          ref='filterInput'\r\n          placeholder=\"Nach Zutaten filtern ...\"\r\n          // binding the input value to state\r\n          value={filterVal}\r\n          onChange={() => {\r\n           filterUpdate(this.refs.filterInput.value)\r\n          }}\r\n        />\r\n        </MediaQuery>\r\n        <MediaQuery maxDeviceWidth={1224}>\r\n        <input \r\n          type='text'\r\n          ref='filterInput'\r\n          placeholder=\"Nach Zutaten filtern...\"\r\n          // binding the input value to state\r\n          value={filterVal}\r\n          onChange={() => {\r\n           filterUpdate(this.refs.filterInput.value) \r\n          }}\r\n        />\r\n        </MediaQuery>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search","import React from 'react'\r\n\r\nexport default ({data, selection, removeSelection}) => {\r\n    var url_search = \"https://www.google.de/search?q=\"\r\n    const ingrList = selection.map(id => {\r\n    url_search += data[id]['item']\r\n    url_search += '+'\r\n    const { item } = data[id]\r\n    return (\r\n        <li \r\n        key={id} className=\"selected\"\r\n        onClick={() => removeSelection(data[id][\"id\"])}\r\n        >{item}</li>\r\n    )\r\n    })\r\n    url_search += 'rezept'\r\n    return (\r\n        <div>\r\n        {selection.length > 0 ? \"\" : <h4>Auf eine Zutat klicken, um zu beginnen.</h4>}\r\n        <ul>\r\n            {ingrList}\r\n        </ul>\r\n        {selection.length > 0 ? <a \r\n                                href={url_search}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"><span \r\n                                                            role=\"img\"\r\n                                                            aria-label=\"backhand-index-pointing-right\">👉</span>Rezept suchen</a> : \"\"}\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\n\r\nclass Suggestions extends Component {\r\n    render() {\r\n        function intersectB(firstSet, ...sets) {\r\n            // function to intercept two sets\r\n            var intersect = (a,b) => {\r\n                return new Set([...a].filter(item => b.has(item)))\r\n            };\r\n        \r\n            // iterate all sets comparing the first set to each.\r\n            sets.forEach(sItem => firstSet = intersect(firstSet, sItem));\r\n        \r\n            // return the result.\r\n            return firstSet;\r\n        }\r\n\r\n        var sets = []\r\n\r\n        const { data, selection, addSelection, ingredientID } = this.props\r\n        const SuggestionList = selection.map(sel => {\r\n        let tempset = new Set(data[sel]['tgth_with'])\r\n        sets.push(tempset)\r\n        if (selection.length === sets.length) {\r\n            var inter = intersectB(...sets);\r\n            var intersection_list = [...inter]\r\n        }\r\n        if (intersection_list !== undefined) {\r\n        return (\r\n            intersection_list\r\n        ).map(ingredient => {\r\n            return (\r\n                <li\r\n                key={ingredientID[ingredient]} \r\n                className=\"suggestion\"\r\n                onClick={() => addSelection(ingredientID[ingredient])}\r\n            >{ ingredient }</li>\r\n            )\r\n        })\r\n        } else {\r\n            return (\r\n                console.log(\"ignore\")\r\n            )\r\n        }\r\n        })\r\n\r\n        // console.log(results)\r\n\r\n        return(\r\n            <div className=\"suggestionbox\">\r\n                {SuggestionList.length === 0 ? \"\" : <h4>Beliebte Kombinationen:</h4>}\r\n                <ul>\r\n                    {SuggestionList}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Suggestions;","import React, { Component } from 'react';\n// import Rezepte from './rezepte/Rezepte'\n// import ReactYoutubeExample from './ReactYoutubeExample'\n// import ReactMarkdownExample from './ReactMarkDownExample';\nimport IngredientList from './components/IngredientList'\nimport Credit from './components/Credit'\nimport Search from './components/Search'\nimport ShortList from './components/ShortList';\nimport Suggestions from './components/Suggestions';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      filterText: '',\n      selection: []\n    }\n  }\n\n  filterUpdate(value) {\n    this.setState({\n      filterText: value\n    })\n  }\n\n  addSelection(id) {\n    const sel_list = this.state.selection.concat([id])\n    this.filterUpdate(\"\")\n    this.setState({\n      selection: sel_list,\n      // filterText: ''\n    })\n  }\n\n  removeSelection(id) {\n    const sel_list = this.state.selection\n    var filteredAry = sel_list.filter(function(e) { return e !== id })\n    this.setState({\n      selection: filteredAry\n    })\n  }\n\n  render() {\n    const hasSearch = this.state.filterText.length > 0\n    return(\n      <div>\n        <header>\n        <Search \n        filterVal={this.state.filterText}\n        filterUpdate={this.filterUpdate.bind(this)}\n        />\n        </header>\n        <main>\n        <ShortList \n        selection={this.state.selection}\n        data={this.props.data}\n        removeSelection={this.removeSelection.bind(this)}\n        />\n        { !hasSearch &&\n            <Suggestions \n        data={this.props.data}\n        ingredientID={this.props.ingredientID}\n        selection={this.state.selection}\n        addSelection={this.addSelection.bind(this)}\n        />\n          }\n        <IngredientList \n        data={this.props.data}\n        filterText={this.state.filterText}\n        selection={this.state.selection}\n        addSelection={this.addSelection.bind(this)}\n        />\n        {\n          hasSearch &&\n          <button\n          onClick={this.filterUpdate.bind(this, '')}>\n          Suchanfrage entfernen\n          </button>\n        }\n        <Credit />\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport data from './data/top-50-ingredients.json'\nimport 'normalize-css'\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nfunction updateID(array) {\n  let i\n  for (i=0; i < array.length ; i++) {\n    array[i][\"id\"] = i;\n  }\n  return array;\n}\n\nfunction termIDmapping(array) {\n  let i\n  var tempdict = {}\n  for (i=0; i < array.length ; i++) {\n    tempdict[array[i]['item']] = i;\n  }\n  return tempdict;\n}\n\nshuffleArray(data)\nupdateID(data)\nconst ingredientID = termIDmapping(data)\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App \n    data={data}\n    ingredientID={ingredientID}\n     />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}